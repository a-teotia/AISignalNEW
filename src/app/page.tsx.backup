// MVP UI for AI-Powered Trading Signal Platform
"use client";

import React, { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Legend, BarChart, Bar } from "recharts";
import { Progress } from "@/components/ui/progress";
import { motion, AnimatePresence } from "framer-motion";
import ReactMarkdown from "react-markdown";

const dummyNews = [
  "BHP surges as iron ore prices rebound",
  "RBA decision boosts market optimism",
  "Crypto rallies amid ETF speculation"
];

type ChartPoint = {
  date: string;
  prediction: number;
  actual: number;
};

type PerformanceMetrics = {
  total_predictions: number;
  correct_predictions: number;
  accuracy_rate: number;
  average_confidence: number;
  total_profit_loss: number;
  win_rate: number;
  symbol: string;
  timeframe: string;
};

type PredictionVerdict = {
  id: number;
  symbol: string;
  prediction_date: string;
  verdict: 'UP' | 'DOWN' | 'NEUTRAL';
  confidence: number;
  reasoning: string;
  market_context: string;
  created_at: string;
  actual_price?: number;
  actual_date?: string;
  accuracy?: boolean;
  profit_loss?: number;
  performance_notes?: string;
};

export default function Dashboard() {
  const [loading, setLoading] = useState(false);
  const [symbol, setSymbol] = useState("BHP.AX");
  const [selectedDate, setSelectedDate] = useState("");
  const [confidence, setConfidence] = useState(0);
  const [verdict, setVerdict] = useState("?");
  const [reason, setReason] = useState("");
  const [chartData, setChartData] = useState<ChartPoint[]>([]);
  const [expanded, setExpanded] = useState(false);
  const [showFullReason, setShowFullReason] = useState(false);
  const [performanceMetrics, setPerformanceMetrics] = useState<PerformanceMetrics | null>(null);
  const [recentPredictions, setRecentPredictions] = useState<PredictionVerdict[]>([]);
  const [accuracyTrends, setAccuracyTrends] = useState<Array<{date: string, accuracy: number}>>([]);
  const [predictionId, setPredictionId] = useState<number | null>(null);

  // Load performance metrics on symbol change
  useEffect(() => {
    loadPerformanceMetrics();
  }, [symbol]);

  const loadPerformanceMetrics = async () => {
    try {
      const response = await fetch(`/api/performance?symbol=${symbol}&timeframe=all`);
      const data = await response.json();
      
      if (data.metrics) {
        setPerformanceMetrics(data.metrics);
      }
      if (data.trends) {
        setAccuracyTrends(data.trends);
      }
      if (data.recentPredictions) {
        setRecentPredictions(data.recentPredictions);
      }
    } catch (error) {
      console.error('Error loading performance metrics:', error);
    }
  };

  const handleAnalyze = async () => {
    setLoading(true);
    console.log("Symbol:", symbol);
    console.log("Date:", selectedDate);

    const today = new Date().toISOString().split("T")[0];
    if (selectedDate > today) {
      alert("Please select a date that is today or earlier.");
      setLoading(false);
      return;
    }

    try {
      const startDate = selectedDate || new Date(Date.now() - 7 * 86400000).toISOString().split("T")[0];

      const response = await fetch(
        `https://api.twelvedata.com/time_series?symbol=${symbol}&interval=1day&start_date=${startDate}&outputsize=5&apikey=3c7da267bcc24e8d8e2dfde0e257378b`
      );
      const data = await response.json();
      console.log("API raw response:", data);

      if (data && data.values) {
        const reversed = [...data.values].reverse();
        const transformed = reversed.map((item) => ({
          date: item.datetime,
          prediction: parseFloat(item.close),
          actual: parseFloat(item.close)
        }));

        setChartData(transformed);

        const sentimentRes = await fetch("/api/sentiment", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ 
            symbol, 
            predictionDate: selectedDate || new Date().toISOString().split('T')[0]
          }),
        });
        const sentimentData = await sentimentRes.json();
        const summary = sentimentData.summary;

        if (sentimentData.prediction) {
          setConfidence(sentimentData.prediction.confidence);
          setVerdict(sentimentData.prediction.verdict === 'UP' ? 'UP 📈' : 
                    sentimentData.prediction.verdict === 'DOWN' ? 'DOWN 📉' : 'NEUTRAL ➡️');
          setReason(sentimentData.prediction.reasoning);
          setPredictionId(sentimentData.prediction.id);
        } else {
          // Fallback to mock data
          const mockConfidence = Math.floor(Math.random() * 30) + 60;
          const mockVerdict = Math.random() > 0.5 ? "UP 📈" : "DOWN 📉";
          setConfidence(mockConfidence);
          setVerdict(mockVerdict);
          setReason(summary);
        }
      } else {
        throw new Error("Invalid data from API");
      }
    } catch (error) {
      console.error("Error fetching from Twelve Data or Sentiment:", error);
    }

    setLoading(false);
    // Reload performance metrics after new prediction
    setTimeout(loadPerformanceMetrics, 1000);
  };

  const displayedReason = expanded
    ? reason
    : reason.split(/(?=\*\*)|(?=\n\n)/).slice(0, 2).join("\n");

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-black text-white p-6 grid grid-cols-1 md:grid-cols-2 gap-6">
      <div className="col-span-1 md:col-span-2 text-center mb-4 animate-fade-in">
        <h1 className="text-5xl font-extrabold tracking-tight text-white drop-shadow">AI-Powered Trading Signals</h1>
        <p className="text-lg text-gray-400 mt-1">For ASX & Crypto | Beginner Friendly | Real Data. Real Insight.</p>
      </div>

      <Card className="col-span-1 md:col-span-2 bg-gray-850 hover:shadow-xl hover:shadow-green-500/20 transition duration-300 ease-in-out">
        <CardContent className="flex flex-col md:flex-row gap-4 p-4">
          <Select value={symbol} onValueChange={setSymbol}>
            <SelectTrigger className="w-full md:w-1/3 bg-gray-800 text-white border border-gray-600">
              <SelectValue placeholder="Select Symbol" />
            </SelectTrigger>
            <SelectContent className="bg-gray-900 text-white border border-gray-700">
              <SelectItem value="BHP.AX">BHP.AX</SelectItem>
              <SelectItem value="CBA.AX">CBA.AX</SelectItem>
              <SelectItem value="BTC/USD">BTC/USD</SelectItem>
            </SelectContent>
          </Select>
          <Input
            type="date"
            value={selectedDate}
            max={new Date().toISOString().split("T")[0]}
            onChange={(e) => setSelectedDate(e.target.value)}
            className="w-full md:w-1/3 bg-gray-800 text-white border border-gray-600 placeholder-gray-400"
            placeholder="Select Date"
          />
          <Button onClick={handleAnalyze} disabled={loading} className="w-full md:w-1/3 bg-green-600 hover:bg-green-500 text-white font-semibold">
            {loading ? "Analyzing..." : "Analyze"}
          </Button>
        </CardContent>
      </Card>

      {/* Performance Metrics */}
      {performanceMetrics && (
        <Card className="bg-gray-850 animate-fade-in hover:shadow-lg hover:shadow-blue-400/20 transition duration-300">
          <CardContent className="p-4 space-y-3">
            <h2 className="text-xl font-bold text-white">Performance Metrics</h2>
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center">
                <p className="text-2xl font-bold text-blue-400">{performanceMetrics.accuracy_rate}%</p>
                <p className="text-sm text-gray-400">Accuracy Rate</p>
              </div>
              <div className="text-center">
                <p className="text-2xl font-bold text-green-400">{performanceMetrics.total_predictions}</p>
                <p className="text-sm text-gray-400">Total Predictions</p>
              </div>
              <div className="text-center">
                <p className="text-2xl font-bold text-yellow-400">{performanceMetrics.average_confidence}%</p>
                <p className="text-sm text-gray-400">Avg Confidence</p>
              </div>
              <div className="text-center">
                <p className={`text-2xl font-bold ${performanceMetrics.total_profit_loss >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                  {performanceMetrics.total_profit_loss >= 0 ? '+' : ''}{performanceMetrics.total_profit_loss}
                </p>
                <p className="text-sm text-gray-400">Total P&L</p>
              </div>
            </div>
            {predictionId && (
              <p className="text-xs text-gray-500 text-center">Prediction ID: {predictionId}</p>
            )}
          </CardContent>
        </Card>
      )}

      {/* Verdict and Reasoning */}
      <Card className="bg-gray-850 animate-fade-in hover:shadow-lg hover:shadow-green-400/20 transition duration-300">
        <CardContent className="p-4 space-y-3">
          <h2 className="text-xl font-bold text-white">Prediction Verdict</h2>

          <p
            className={`text-3xl font-extrabold flex items-center gap-2 ${
              verdict.includes("UP")
                ? "text-green-400"
                : verdict.includes("DOWN")
                ? "text-red-400"
                : "text-gray-400"
            }`}
          >
            {verdict}
            {verdict.includes("UP") && <span>📈</span>}
            {verdict.includes("DOWN") && <span>📉</span>}
          </p>

          <p className="text-sm text-gray-400">Confidence: {confidence}%</p>

          <div className="relative h-2 bg-gray-700 rounded-full overflow-hidden">
            <motion.div
              className={`h-full ${
                verdict.includes("UP") ? "bg-green-500" : "bg-red-500"
              }`}
              initial={{ width: 0 }}
              animate={{ width: `${confidence}%` }}
              transition={{ duration: 0.7 }}
            />
          </div>

          <div className="text-sm text-gray-300">
            <ReactMarkdown
              components={{
                p: ({ children }) => (
                  <p className="text-sm text-gray-300 mb-2">{children}</p>
                ),
                h3: ({ children }) => (
                  <h3 className="text-md font-bold text-white mt-4 mb-2">
                    {children}
                  </h3>
                ),
                strong: ({ children }) => (
                  <strong className="text-white font-semibold">{children}</strong>
                ),
              }}
            >
              {reason.split("\n")[0]}
            </ReactMarkdown>

            <AnimatePresence>
              {showFullReason && (
                <motion.div
                  key="full"
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: "auto" }}
                  exit={{ opacity: 0, height: 0 }}
                  transition={{ duration: 0.4 }}
                >
                  <ReactMarkdown
                    components={{
                      p: ({ children }) => (
                        <p className="text-sm text-gray-300 mb-2">{children}</p>
                      ),
                      h3: ({ children }) => (
                        <h3 className="text-md font-bold text-white mt-4 mb-2">
                          {children}
                        </h3>
                      ),
                      strong: ({ children }) => (
                        <strong className="text-white font-semibold">
                          {children}
                        </strong>
                      ),
                      li: ({ children }) => (
                        <li className="mb-1 list-disc ml-4">{children}</li>
                      ),
                    }}
                  >
                    {reason.split("\n").slice(1).join("\n")}
                  </ReactMarkdown>
                </motion.div>
              )}
            </AnimatePresence>
          </div>

          <div className="flex items-center justify-between pt-2">
            <button
              onClick={() => setShowFullReason((prev) => !prev)}
              className="text-sm font-semibold text-green-400 hover:underline focus:outline-none flex items-center"
            >
              {showFullReason ? "▲ Show Less" : "▼ Show Full Analysis"}
            </button>

            {verdict.includes("UP") && (
              <span className="inline-block px-3 py-1 text-xs font-medium bg-green-700 text-white rounded-full">
                Strong Buy
              </span>
            )}
            {verdict.includes("DOWN") && (
              <span className="inline-block px-3 py-1 text-xs font-medium bg-red-700 text-white rounded-full">
                Risk Alert
              </span>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Accuracy Trends Chart */}
      {accuracyTrends.length > 0 && (
        <Card className="bg-gray-850 animate-fade-in hover:shadow-lg hover:shadow-purple-400/20 transition duration-300">
          <CardContent className="p-4">
            <h2 className="text-xl font-bold text-white mb-4">Accuracy Trends (30 Days)</h2>
            <ResponsiveContainer width="100%" height={200}>
              <BarChart data={accuracyTrends.slice(0, 10)}>
                <CartesianGrid strokeDasharray="3 3" stroke="#2f2f2f" />
                <XAxis dataKey="date" stroke="#aaa" />
                <YAxis domain={[0, 100]} stroke="#aaa" />
                <Tooltip contentStyle={{ backgroundColor: '#1a1a1a', borderColor: '#888' }} labelStyle={{ color: '#fff' }} />
                <Bar dataKey="accuracy" fill="#8b5cf6" name="Accuracy %" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      )}

      {/* Recent Predictions */}
      {recentPredictions.length > 0 && (
        <Card className="bg-gray-850 animate-fade-in hover:shadow-lg hover:shadow-orange-400/20 transition duration-300">
          <CardContent className="p-4">
            <h2 className="text-xl font-bold text-white mb-4">Recent Predictions</h2>
            <div className="space-y-2 max-h-60 overflow-y-auto">
              {recentPredictions.map((prediction, index) => (
                <div key={prediction.id} className="flex items-center justify-between p-2 bg-gray-800 rounded">
                  <div className="flex-1">
                    <p className="text-sm font-medium text-white">{prediction.symbol}</p>
                    <p className="text-xs text-gray-400">{prediction.prediction_date}</p>
                  </div>
                  <div className="text-right">
                    <p className={`text-sm font-bold ${
                      prediction.verdict === 'UP' ? 'text-green-400' : 
                      prediction.verdict === 'DOWN' ? 'text-red-400' : 'text-gray-400'
                    }`}>
                      {prediction.verdict}
                    </p>
                    <p className="text-xs text-gray-400">{prediction.confidence}%</p>
                    {prediction.accuracy !== undefined && (
                      <span className={`text-xs px-1 rounded ${
                        prediction.accuracy ? 'bg-green-700 text-green-200' : 'bg-red-700 text-red-200'
                      }`}>
                        {prediction.accuracy ? '✓' : '✗'}
                      </span>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      <Card className="bg-gray-850 animate-fade-in hover:shadow-lg hover:shadow-green-400/20 transition duration-300">
        <CardContent className="p-4">
          <h2 className="text-2xl font-semibold text-white mb-4">Prediction vs Real</h2>
          <ResponsiveContainer width="100%" height={250}>
            <LineChart data={chartData}>
              <CartesianGrid strokeDasharray="3 3" stroke="#2f2f2f" />
              <XAxis dataKey="date" stroke="#aaa" />
              <YAxis domain={['auto', 'auto']} stroke="#aaa" />
              <Tooltip contentStyle={{ backgroundColor: '#1a1a1a', borderColor: '#888' }} labelStyle={{ color: '#fff' }} />
              <Legend wrapperStyle={{ color: '#fff' }} />
              <Line type="monotone" dataKey="prediction" stroke="#4f9cf9" name="Prediction" strokeWidth={2} isAnimationActive={true} />
              <Line type="monotone" dataKey="actual" stroke="#7cf96d" name="Actual" strokeWidth={2} isAnimationActive={true} />
            </LineChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>

      <Card className="bg-gray-850 animate-fade-in hover:shadow-lg hover:shadow-green-400/20 transition duration-300">
        <CardContent className="p-4 space-y-2">
          <h2 className="text-xl font-bold text-white mb-2">Relevant News & Sentiment</h2>
          <ul className="list-disc pl-4 text-sm text-gray-300 space-y-1">
            {dummyNews.map((news, idx) => (
              <li key={idx}>{news}</li>
            ))}
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}
